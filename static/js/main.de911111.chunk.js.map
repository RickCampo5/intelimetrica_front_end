{"version":3,"sources":["components/Navbar/index.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","containerStyle","width","height","Card","name","contact","site","email","phone","address","street","city","state","location","lat","lng","rating","React","useState","setMap","onLoad","useCallback","map","bounds","window","google","maps","LatLngBounds","fitBounds","onUnmount","center","googleMapsApiKey","mapContainerStyle","zoom","target","rel","appId","colorScheme","App","restaurants","setRestaurants","useEffect","fetch","proxyURL","then","res","json","data","id","key","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mTAWeA,G,YARA,WACb,OACE,yBAAKC,UAAU,OACb,uBAAGA,UAAU,OAAOC,KAAK,KAAzB,W,gBCDAC,G,MAAiB,CACrBC,MAAO,OACPC,OAAQ,UAgFKC,EA7EF,SAAC,GAKP,IAJLC,EAII,EAJJA,KAII,IAHJC,QAAWC,EAGP,EAHOA,KAAMC,EAGb,EAHaA,MAAOC,EAGpB,EAHoBA,MAGpB,IAFJC,QAAWC,EAEP,EAFOA,OAAQC,EAEf,EAFeA,KAAMC,EAErB,EAFqBA,MAErB,IAF4BC,SAAYC,EAExC,EAFwCA,IAAKC,EAE7C,EAF6CA,IACjDC,EACI,EADJA,OACI,EACkBC,IAAMC,SAAS,MADjC,mBACQC,GADR,WAGEC,EAASH,IAAMI,aAAY,SAAkBC,GACjD,IAAMC,EAAS,IAAIC,OAAOC,OAAOC,KAAKC,aACtCL,EAAIM,UAAUL,GACdJ,EAAOG,KACN,IAEGO,EAAYZ,IAAMI,aAAY,SAAkBC,GACpDH,EAAO,QACN,IAEGW,EAAS,CACbhB,IAAKA,EACLC,IAAKA,GAGP,OACE,yBAAKjB,UAAU,QACb,kBAAC,IAAD,CACEiC,iBAAiB,2CAEjB,kBAAC,IAAD,CACEC,kBAAmBhC,EACnB8B,OAAQA,EACRG,KAAM,GACNb,OAAQA,EACRS,UAAWA,GAGX,uCAGJ,wBAAI/B,UAAU,QAAQM,GACtB,6BACE,wBAAIN,UAAU,SAAd,YACA,wBAAIA,UAAU,QACZ,4BACE,uBAAGA,UAAU,OAAOC,KAAMO,EAAM4B,OAAO,SAASC,IAAI,uBAAuB7B,IAE7E,4BACE,uBAAGR,UAAU,OAAOC,KAAI,iBAAYQ,IAAUA,IAEhD,4BACE,uBAAGT,UAAU,OAAOC,KAAI,cAASS,IAAUA,MAIjD,6BACE,wBAAIV,UAAU,SAAd,YACA,wBAAIA,UAAU,QACZ,wBAAIA,UAAU,UAAUY,GACxB,wBAAIZ,UAAU,QAAQa,GACtB,wBAAIb,UAAU,QAAQc,KAG1B,6BACE,wBAAId,UAAU,SAAd,WAA+BkB,IAEjC,yBAAKlB,UAAU,WACb,kBAAC,mBAAD,CAAkBsC,MAAM,oBACtB,kBAAC,OAAD,CAAMrC,KAAMO,EAAM+B,YAAY,SAC9B,kBAAC,cAAD,CAAavC,UAAU,QAAQC,KAAMO,GAArC,aCpCKgC,MApCf,WAAgB,IAAD,EACyBpB,mBAAS,IADlC,mBACNqB,EADM,KACOC,EADP,KAcb,OAXAC,qBAAU,WAIRC,MAAMC,6GACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJP,EAAeO,QAEhB,IAGD,yBAAKjD,UAAU,cACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,kBAEXyC,EAAYjB,KAAI,YAA6C,IAA1C0B,EAAyC,EAAzCA,GAAI5C,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,QAASI,EAAsB,EAAtBA,QAASO,EAAa,EAAbA,OAC7C,OACE,kBAAC,EAAD,CACEiC,IAAKD,EACL5C,KAAMA,EACNC,QAASA,EACTI,QAASA,EACTO,OAAQA,UCpBJkC,QACW,cAA7B1B,OAAOX,SAASsC,UAEe,UAA7B3B,OAAOX,SAASsC,UAEhB3B,OAAOX,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.de911111.chunk.js","sourcesContent":["import React from 'react';\nimport './styles.css'\n\nconst Navbar = () => {\n  return (\n    <div className=\"nav\">\n      <a className=\"logo\" href=\"/\">Melp</a>\n    </div>\n  )\n}\n\nexport default Navbar\n","import React from 'react'\nimport { FacebookProvider, Like, ShareButton } from 'react-facebook'\nimport { GoogleMap, LoadScript } from '@react-google-maps/api'\nimport './styles.css'\n\nconst containerStyle = {\n  width: '100%',\n  height: '160px'\n};\n\nconst Card = ({ \n  name, \n  contact: { site, email, phone }, \n  address: { street, city, state, location: { lat, lng } }, \n  rating \n}) => {\n  const [map, setMap] = React.useState(null)\n\n  const onLoad = React.useCallback(function callback(map) {\n    const bounds = new window.google.maps.LatLngBounds();\n    map.fitBounds(bounds);\n    setMap(map)\n  }, [])\n\n  const onUnmount = React.useCallback(function callback(map) {\n    setMap(null)\n  }, [])\n\n  const center = {\n    lat: lat,\n    lng: lng\n  }\n\n  return(\n    <div className=\"card\">\n      <LoadScript\n        googleMapsApiKey=\"AIzaSyAdA6tSsSu4CxX1a5npT52WOpzV_udgWhM\"\n      >\n        <GoogleMap\n          mapContainerStyle={containerStyle}\n          center={center}\n          zoom={10}\n          onLoad={onLoad}\n          onUnmount={onUnmount}\n        >\n          { /* Child components, such as markers, info windows, etc. */ }\n          <></>\n        </GoogleMap>\n      </LoadScript>\n      <h3 className=\"name\">{name}</h3>\n      <div>\n        <h4 className=\"title\">Contact:</h4>\n        <ul className=\"list\">\n          <li>\n            <a className=\"link\" href={site} target=\"_blank\" rel=\"noopener noreferrer\">{site}</a>\n          </li>\n          <li>\n            <a className=\"link\" href={`mailto:${email}`}>{email}</a>\n          </li>\n          <li>\n            <a className=\"link\" href={`tel:${phone}`}>{phone}</a>\n          </li>\n        </ul>\n      </div>\n      <div>\n        <h4 className=\"title\">Address:</h4>\n        <ul className=\"list\">\n          <li className=\"street\">{street}</li>\n          <li className=\"city\">{city}</li>\n          <li className=\"city\">{state}</li>\n        </ul>\n      </div>\n      <div>\n        <h4 className=\"title\">Rating: {rating}</h4>\n      </div>\n      <div className=\"fb-btns\">\n        <FacebookProvider appId=\"3387903737945972\">\n          <Like href={site} colorScheme=\"dark\" />\n          <ShareButton className=\"share\" href={site}>\n            Share\n          </ShareButton>\n        </FacebookProvider>\n      </div>\n    </div>\n  )\n}\n\nexport default Card\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport Navbar from './components/Navbar'\nimport Card from './components/Card'\n\nfunction App() {\n  const [restaurants, setRestaurants] = useState([])\n\n  useEffect(() => {\n    const proxyURL = 'https://cors-anywhere.herokuapp.com/'\n    const url = 'https://recruiting-datasets.s3.us-east-2.amazonaws.com/data_melp.json'\n\n    fetch(proxyURL + url)\n    .then(res => res.json())\n    .then(data => {\n      setRestaurants(data)\n    })\n  }, [])\n\n  return (\n    <div className=\"App-header\">\n      <Navbar />\n      <div className=\"card_container\">\n        {\n          restaurants.map(({ id, name, contact, address, rating }) => {\n            return (\n              <Card \n                key={id} \n                name={name} \n                contact={contact} \n                address={address} \n                rating={rating} \n              />\n            )\n          })\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}